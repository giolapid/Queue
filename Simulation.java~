//Gio Lapid
//CMPS12B
//07/25/13
//PA4
//Simulation.java

import java.util.*;    
import java.io.*;

public class Simulation{
    //puts arrive times in an array
    public static int[] getArrive(Scanner in, int[] A, int numJob) {
	int first = in.nextInt();
        int[] a = new int[numJob];
	int[] temp = new int[numJob];
	for(int i = 0; i < numJob; i++){
	    a[i] = in.nextInt();
	    temp[i] = in.nextInt();
	}
	return a;
    }
    //puts depart time in an array
    public static int[] getDuration(Scanner in, int[] A, int numJob) {
        int first = in.nextInt();
	int[] d = new int[numJob];   
	int[] temp = new int[numJob];
	for(int i = 0; i < numJob; i++){
	    temp[i] = in.nextInt();
	    d[i] = in.nextInt();
	}	
	return d;
    }
    public static void main(String[] args) throws IOException{
	int arrival = 0, finish = Integer.MAX_VALUE, time = 0, maxWait = 0, smallFinish = 0;
	int findShort = Integer.MAX_VALUE, indShort = 0, lag = 0;
	double aver = 0;

	Scanner arrive = null;
	Scanner duration = null;
	Scanner inFile = null;
	PrintWriter report = null;
	PrintWriter trace = null;
	
	if(args.length < 1){
	   System.out.println("Usage: Simulation input_file");
	   System.exit(1);
	}

	arrive = new Scanner(new File(args[0]));
	duration = new Scanner(new File(args[0]));
	inFile = new Scanner(new File(args[0]));
	report = new PrintWriter(new FileWriter(args[0] + ".rpt"));
	trace = new PrintWriter(new FileWriter(args[0] + ".trc"));

       //calculates number of jobs
       int numJob = inFile.nextInt();

       //put jobs into arrays for the linked list declaration
       int[] arr = new int[numJob];
       int[] dur = new int[numJob];
       Job[] jobs = new Job[numJob];
       
       arr = getArrive(arrive, arr, numJob);
       dur = getDuration(duration, dur, numJob);
       
       //creates the jobs
       for(int i = 0; i < numJob; i++)
	   jobs[i] = new Job(arr[i], dur[i]);

       Queue backup = new Queue();
       Queue storage = new Queue();
       Queue fin = new Queue();

       //puts the jobs into storage and backup queue
       for(int countJob = 0; countJob < numJob; countJob++){
	   backup.enqueue(jobs[countJob]);
	   storage.enqueue(jobs[countJob]);
       }



//    4.  run simulation with n processors for n=1 to n=m-1  {
//
       for(int n = 1; n <= numJob-1; n++){		       
	   Job J = (Job)storage.peek(), T, R, B, C;
	   int counter = storage.length();
			       
			       
//    5.      declare and initialize an array of n processor Queues and any 
//            necessary storage Queues
//
	   Queue[] processor = new Queue[n];//initialize an array of n processor
	   for(int b = 0; b < n; b++)
			processor[b] = new Queue();
	   
	   
//    6. while there are still jobs left

	   while(counter > fin.length()){
	       	
	       // 7.          determine the time of the next arrival or finish event and 
		  //                update time
	       //arrival time
	       if(!storage.isEmpty()){
		   J = (Job)storage.peek();
		   arrival = J.getArrival();
	       }
	       //find finish time
	       for(int y = 0; y < n; y++){
		   //look at all the processors for the shortest finish time
		   if(!processor[y].isEmpty()){
		       T =(Job)processor[y].peek();
		       if(finish > T.getFinish() && T.getFinish() != -1){
			   finish = T.getFinish();
			   smallFinish = y; 
		       }
		   }
	       }
	       
	       //update time
	       //if arrival is earlier than the finish time
	       if(arrival <= finish)
		   time = arrival;
	       else
		   time = finish;

		  //
		  //    8.          complete all processes finishing now
		  //
	       
	       if(time == finish){
		   //   if(!processor[smallFinish].isEmpty()){
		       R = (Job)processor[smallFinish].peek();
		       fin.enqueue(R);
		       processor[smallFinish].dequeue();
		       //		       time = arrival;
		       //}
	       }
		  //    9.          if there are any jobs arriving now, assign them to a processor 
		  //                Queue of minimum length and with lowest index in the queue array.
	       //try else
	       if(time == arrival){
		   //find the shortest queue
		   for(int p = 0; p < n; p++){
		       if(processor[p].isEmpty()){
			   indShort = p;
			   break;
		       }
		       if(processor[p].length() < findShort){
			   indShort = p;
			   findShort = processor[p].length();
		       }
		   }
		   if(!storage.isEmpty()){
		       processor[indShort].enqueue(J);
		       storage.dequeue();
		       if(J == (Job)processor[indShort].peek())
			   J.computeFinishTime(time);
		       time = J.getFinish();
		   }
	       }
	       if(!storage.isEmpty()){
		   J = (Job)processor[indShort].peek();
		   if(J == (Job)processor[indShort].peek())
		       J.computeFinishTime(time);
	       
	       }

	       System.out.println(n + " processors");
	       System.out.println("time: " + time);
	       for(int c = 0; c < n; c++)
		   System.out.println( (c+1)+": " + processor[c]);
	       System.out.println("final queue: " + fin);
	       //    10.     } end loop
	       //			
	   }
	   
       }
//    11.     compute the total wait, maximum wait, and average wait for 
//            all Jobs, then reset finish times
//
//    12. } end loop
//
       
//    13. close input and output files
	   arrive.close();
	   duration.close();
	   inFile.close();
	   report.close();
	   trace.close();
    }
}




